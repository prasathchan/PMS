@page "/viewdoctors"
@using RestSharp;
@using Newtonsoft.Json
@using PMSMaui.Properties
@using PMSMaui.Data.Common
@using System.Security.Claims
@using PMSMaui.Data.DoctorDetails
@using PMSMaui.Data.ClientDetails
@using PMS_Library.Models.DataModel
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

@code {

	private string msg { get; set; }
	private string name { get; set; }
	private string role { get; set; } 

	private AuthenticationState authstate { get; set; }
	private User_Auth authObject = new();
	private Client_Details clientObject = new();
	IList<Doctor_Details> doctorList;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var baseURL = DeviceInfo.Platform == DevicePlatform.Android ? Resources.apk_baseURL : Resources.win_baseURL;
			if (DataConnection.ServerStatus(baseURL) == false)
			{
				doctorList = null;
				msg = "Server is Not Running";
			}
			else
			{
				authstate = await authStateProvider.GetAuthenticationStateAsync();
				name = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Name).Select(c => c.Value).SingleOrDefault();
				role = authstate.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
				await Task.Run(LoadDoctors);
			}
		}
		catch (Exception ex)
		{
			msg = ex.Message.ToString();
			navManager.NavigateTo($"/error/{msg}");
		}
	}


	private void LoadDoctors()
	{
		System.Threading.Thread.Sleep(3000);
		authObject = JsonConvert.DeserializeObject<User_Auth>(Data.Auth.Accounts.GetByEmail(name).Content);
		
		if(authObject.ClientName!=null)
		{
			clientObject = JsonConvert.DeserializeObject<Client_Details>(Clients.FetchSpecificClient(authObject.ClientName).Content);
			doctorList = JsonConvert.DeserializeObject<IList<Doctor_Details>>(Doctors.FetchDoctorsByHospitalId(clientObject.HospitalID).Content);
		}
		else
		{
			doctorList = JsonConvert.DeserializeObject<IList<Doctor_Details>>(Doctors.FetchDoctors().Content);
		}
	}

	private async void OnClickCreateDoctor()
	{
		try
		{
			await Task.Run(() =>
			{
				navManager.NavigateTo("/createdoctor");
			});
		}
		catch (Exception ex) { await Application.Current.MainPage.DisplayAlert("Failure", ex.Message, "Ok"); }
	}

	private async void OnClickEditDoctor(string doctorName, string email)
	{
		try
		{
			await Task.Run(() =>
			{
				navManager.NavigateTo($"/editdoctor/{doctorName}/{email}");
			});
		}
		catch (Exception ex) { await Application.Current.MainPage.DisplayAlert("Failure", ex.Message, "Ok"); }
	}


	private async void OnClickDeleteDoctor(string doctorName, string email)
	{
		try
		{
			bool answer = await Application.Current.MainPage.DisplayAlert("Are you Sure you want to delete " + doctorName + " this poor guy?", "Please dont do that!", "Yes", "No");
			if (answer == true)
			{
				RestResponse response = Doctors.DeleteDoctor(doctorName, email);
				if (response.IsSuccessful)
				{
					await Application.Current.MainPage.DisplayAlert("Success", "Doctor Deleted Successfully", "Ok");
					navManager.NavigateTo("/viewdoctors");
				}
				else
				{
					await Application.Current.MainPage.DisplayAlert("Failure", response.Content, "Ok");
				}
			}
			else
			{
				await Application.Current.MainPage.DisplayAlert("Failure", "Doctor Deletion Cancelled", "Ok");
			}
		}
		catch (Exception ex)
		{
			await Application.Current.MainPage.DisplayAlert("Failure", ex.Message, "Ok");
		}
	}
}


@if(doctorList == null)
{
	<div class="spinner"></div>
}
else
{
	<h3>View Doctors</h3>

	<div>
		<h4><button class="btn btn-primary" @onclick="OnClickCreateDoctor">Create New Doctor</button></h4>
	</div>

	<div class="table-responsive">
		<table class="table table-striped">
			<thead>
				<tr>
					<th>Doctor Name</th>
					<th>Speciality</th>
					<th>Phone</th>
					<th>EmailAddress</th>
					<th>ResidentialAddress</th>
					<th>JoiningDate</th>
					<th>LoginEnabled</th>
					<th>Status</th>
					<th>Edit</th>
					<th>Delete</th>
				</tr>
			</thead>
			<tbody class="align-items-center">
				@try
				{
					@foreach (var doctor in doctorList)
					{
						<tr>
							<td>@doctor.DoctorName</td>
							<td>@doctor.SpecialityCode</td>
							<td>@doctor.Phone</td>
							<td>@doctor.EmailAddress</td>
							<td>@doctor.ResidentialAddress</td>
							<td>@doctor.JoiningDate</td>
							<td>@doctor.LoginEnabled</td>
							<td>@doctor.Status</td>
							<td><button class="btn btn-link" @onclick="@(e => OnClickEditDoctor(doctor.DoctorName, doctor.Phone))">Edit</button></td>
							<td><button class="btn btn-link" @onclick="@(e => OnClickDeleteDoctor(doctor.DoctorName, doctor.Phone))">Edit</button></td>
						</tr>
					}
				}
				catch (Exception ex)
				{
					msg = ex.Message.ToString();
					navManager.NavigateTo($"/error/{msg}");
				}
			</tbody>
		</table>
	</div>
}



	




