@page "/login"
@using RestSharp
@using Data.Auth
@using Properties
@using Data.Common
@using Newtonsoft.Json
@using System.Security.Claims
@using PMSMaui.Data.DoctorDetails
@using PMS_Library.Models.DataModel
@using PMS_Library.Models.CustomModel
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager navManager;
@inject AuthenticationStateProvider authStateProvider


@code {
    private User_Auth login = new();
    private string msg { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            var baseURL = DeviceInfo.Platform == DevicePlatform.Android ? Resources.apk_baseURL : Resources.win_baseURL;
            if (DataConnection.ServerStatus(baseURL) == false)
            {
                msg = "Server is Not Running";
            }
            else
            {
                msg = "Server is Running";
            }
        }
        catch (Exception ex)
        {
            msg = ex.Message.ToString();
            navManager.NavigateTo($"/error/{msg}");
        }
        base.OnInitialized();
    }

    private CustomAuthenticationModel GetUserClaims(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var readToken = handler.ReadJwtToken(token);
        var claims = readToken.Claims;

        return new CustomAuthenticationModel()
            {
                EmailID = claims.First(_ => _.Type == ClaimTypes.Name).Value,
                Role= claims.First(_ => _.Type == ClaimTypes.Role).Value,
                AccessToken = token
            };
    }

    protected async Task LoginValidate(EditContext clientContext)
    {
        bool isValid = clientContext.Validate();
        var phone = string.Empty;

        try
        {
            if (isValid == true)
            {
                login.EmailID = clientContext.Model.GetType().GetProperty("EmailID").GetValue(clientContext.Model).ToString();
                login.Password = clientContext.Model.GetType().GetProperty("Password").GetValue(clientContext.Model).ToString();

                var accDtl = JsonConvert.DeserializeObject<CustomAuthenticationModel>(Accounts.GetByEmail(login.EmailID.ToUpper()).Content);
                var Role = accDtl.Role;
                if(Role != null)
                {
                    if (Role == "Doctor")
                    {
                        var docDtl = JsonConvert.DeserializeObject<Doctor_Details>(Doctors.FetchDoctorByEmail(login.EmailID.ToUpper()).Content);
                        phone = "";
                    }
                }
                else
                {
                    await Application.Current.MainPage.DisplayAlert("Failure", "Invalid User", "Ok");
                    return;
                }

                if(phone != login.Password)
                {
                    var lm = new LoginModel()
                        {
                            EmailID = login.EmailID.ToUpper(),
                            Password = login.Password
                        };
                    Task<RestResponse> response = Task.Run(() => Accounts.Login(lm));
                    var savResponse = await response;

                    if (savResponse.IsSuccessful)
                    {
                        var getToken = JsonConvert.DeserializeObject<CustomAuthenticationModel>(savResponse.Content);
                        var userToken = GetUserClaims(getToken.AccessToken);
                        if (userToken == null)
                        {
                            await Application.Current.MainPage.DisplayAlert("Failure", "Invalid User", "Ok");
                            return;
                        }
                        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                        await customAuthStateProvider.UpdateAuthenticationState(getToken);
                        await Application.Current.MainPage.DisplayAlert("Success", "Login Successful", "Ok");
                        navManager.NavigateTo("/");
                    }
                    else
                    {
                        await Application.Current.MainPage.DisplayAlert("Failure", "Invalid Login Attempt", "Ok");
                    }
                }
                else
                {
                    await Application.Current.MainPage.DisplayAlert("Failure", "Reset Your Password", "Ok");
                }
            }
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Failure", ex.Message, "Ok");
        }
    }
}

@{
    <section class="vh-100 gradient-custom">
        <div class="container py-5 h-100">
            <div class="row justify-content-center align-items-center h-100">
                <div class="col-12 col-lg-9 col-xl-7">
                    <div class="card shadow-2-strong card-registration" style="border-radius: 15px;">
                        <div class="card-body p-4 p-md-5">
                            <h3 class="mb-4 pb-2 pb-md-0 mb-md-5">Login Form</h3>

                            <EditForm Model=@login OnValidSubmit="LoginValidate">
                                <DataAnnotationsValidator />
                                <div class="form-group row">
                                    <label for="lblClientName" class="col-sm-2 col-form-label">User Name</label>
                                    <div class="col-sm-10">
                                        <InputText id="txtUserName" class="form-control" @bind-Value="login.EmailID" />
                                        <ValidationMessage For="@(()=>login.EmailID)" />
                                    </div>
                                </div>

                                <div class="form-group row">
                                    <label for="lblPassword" class="col-sm-2 col-form-label">Password</label>
                                    <div class="col-sm-10">
                                        <InputText id="txtPassword" class="form-control" type="password" @bind-Value="login.Password" />
                                        <ValidationMessage For="@(()=>login.Password)" />
                                    </div>
                                </div>

                                <div class="form-group row align-items-sm-start">
                                    <div class="col">
                                        <button type="submit" class="btn btn-primary">Submit</button>
                                    </div>
                                </div>
                            </EditForm>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
}